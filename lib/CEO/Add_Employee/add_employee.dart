import 'dart:math';import 'package:employee/CommonWidgets/CircularLoadingIndicator.dart';import 'package:flutter/cupertino.dart';import 'package:flutter/material.dart';import 'package:flutter/widgets.dart';import 'package:cloud_firestore/cloud_firestore.dart';import 'package:toast/toast.dart';import '../../constants.dart';import 'generate_qr_code.dart';import '../My_Employee/employee_list.dart';import 'package:intl/intl.dart';import '../../Globals.dart' as globals;import '../CommonMethods/GenerateTodayDate.dart';final fireStore = Firestore.instance;const chars = "ABCDEFGHIJKLMNOPWVRSTUVWXYZ0123456789";class AddEmployee extends StatefulWidget {  @override  _AddEmployeeState createState() => _AddEmployeeState();}class _AddEmployeeState extends State<AddEmployee> {  GeneralInfo _info = GeneralInfo();  String _name = "";  String _salary = "";  String _code = "";  String _gst = "";  bool _codeGenerated = false;  bool isLoading = false;  bool isThereName = true;  bool isThereSalary = true;  bool isThereDate = true;  bool isThereGST = true;  DateTime _dateTime = DateTime.now();  List<String> month = ["Jan", "Feb", "Mar", "Apr", "May", "June", "July", "Aug", "Sept", "Oct", "Nov", "Dec"];  List<int> commonYear = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];  List<int> leapYear = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];  _getSalaryDates(){    String lastDate;    if(_info.checkIfLeap(DateTime.now().year)){      lastDate = leapYear[DateTime.now().month-1].toString();    }else if(!_info.checkIfLeap(DateTime.now().year)){      lastDate = commonYear[DateTime.now().month-1].toString();    }    // Add Employee for Salary Management    DateTime now = DateTime.now();    fireStore.collection(globals.companyName).document("Salary Details").collection(_name).document(now.toString()).setData({      "Status": "UnPaid",      "Salary": _salary,      "Paid": "null",      "Date Paid": "null",      "Name": _name,      "Pay Date": DateTime.now().day.toString() + " " + month[_dateTime.month-1] + " " + _dateTime.year.toString() + " - " + lastDate + " " + month[_dateTime.month-1] + " " + DateTime.now().year.toString(),      "Document Name": now.toString(),      "GST": _gst    });  }  _checkFields(){    if(_name != "" && _salary != "" && _gst != ""){      setState(() async {        if(_codeGenerated == false){          setState(() {            _code = _generateRandomCode(6);            _codeGenerated = true;          });        }        _getSalaryDates();        // Add Data to Fire Store        await fireStore.collection(globals.companyName).document("Employee").collection("employee").document(_name).setData({          "Name": _name.toString(),          "Salary": _salary,          "Email": "",          "PhoneNumber": "",          "Code": "^()&*" + "$_code" + "^()&*" + globals.companyName + "^()&*" + "$_name" + "^()&*",          "Start Date": DateFormat("dd-MM-yyyy").format(_dateTime),          "GST": _gst,          "Facebook": "",          "LinkedIn": "",          "Twitter": "",          "Website": "",          "Proficiency": "",          "Bio": "",          "Company Name": globals.companyName,        }).then((value){          Toast.show("Added Employee", context, duration: Toast.LENGTH_LONG, gravity: Toast.BOTTOM);        }).catchError((onError){          Toast.show("Error Registering the User", context, duration: Toast.LENGTH_LONG, gravity: Toast.BOTTOM);        });        // Add data in the work section        await fireStore.collection(globals.companyName).document("Works").collection("Employee").document(_name.toString())            .collection(_name.toString()).document(DateTime.now().toString()).setData({          "Date": DateFormat("dd-MM-yyyy").format(_dateTime),          "Priority": "",          "Start Date": "",          "End Date": "",          "Description": "",          "Status": ""        });        // Add the name of the Employee to the list of Employee        await fireStore.collection(globals.companyName).document("Employee").updateData({          "TotalEmployee": FieldValue.increment(1), // Incrementing the total Number        });        // Get the stored List        List<dynamic> employeeList = [];        await fireStore.collection(globals.companyName).document("Employee").get().then((value){          employeeList = value.data["EmployeeList"];          employeeList.add(_name);          employeeList.sort();          fireStore.collection(globals.companyName).document("Employee").updateData({  // Now updating the ListView            "EmployeeList": employeeList,          }).then((value) => {            print("updated"),            print(employeeList),          }).catchError((onError){            print("error updating");            print(employeeList);          });        });        setState(() {          isLoading = false;        });        Navigator.push(context, MaterialPageRoute(builder: (context) =>DisplayQRCode(          code: "^()&*" + "$_code" + "^()&*" + globals.companyName + "^()&*" + "$_name" + "^()&*",        )));      });    }else{      setState(() {        _name == ""            ? isThereName = false            : isThereName = true;        _salary == ""            ? isThereSalary = false            : isThereName = true;        _gst == ""            ? isThereGST = false            : isThereName = true;      });    }  }  String _generateRandomCode(length){    Random random = new Random(new DateTime.now().millisecondsSinceEpoch);    String result ="";    for(var i=0; i<length; i++){      result +=chars[random.nextInt(chars.length)];    }    return result;  }  @override  Widget build(BuildContext context) {    return Scaffold(      body: isLoading          ? circularProgress()          : SingleChildScrollView(        child: SafeArea(          child: Column(            children: <Widget>[              Padding(                padding: const EdgeInsets.symmetric(horizontal: 5.0, vertical: 5.0),                child: Card(                  shape: RoundedRectangleBorder(                      borderRadius: BorderRadius.all(Radius.circular(10.0))                  ),                  child: Padding(                    padding: const EdgeInsets.symmetric(horizontal: 10.0, vertical: 12.0),                    child: Row(                      mainAxisAlignment: MainAxisAlignment.spaceBetween,                      children: <Widget>[                        GestureDetector(                          onTap: (){                            Navigator.pop(context);                          },                          child: Icon(                            Icons.arrow_back,                            color: Colors.black,                            size: 25.0,                          ),                        ),                        Text(                          "Add Employee",                          style: TextStyle(                              color: Colors.black,                              fontWeight: FontWeight.bold,                              fontSize: 20.0,                              letterSpacing: 1.0                          ),                        ),                        GestureDetector(                          onTap: (){                            Navigator.push(context, MaterialPageRoute(builder: (context) => EmployeeList()));                          },                          child: Icon(                            Icons.list,                            color: Colors.black,                            size: 25.0,                          ),                        )                      ],                    ),                  ),                ),              ),              Padding(                padding: const EdgeInsets.symmetric(horizontal: 7.0),                child: Card(                  shape: RoundedRectangleBorder(                      borderRadius: BorderRadius.only(topLeft: Radius.circular(10.0), bottomLeft: Radius.circular(10.0))                  ),                  child: Row(                    children: <Widget>[                      Container(                          decoration: BoxDecoration(                            color: kLightBlue,                            borderRadius: BorderRadius.only(topLeft: Radius.circular(10.0), bottomLeft: Radius.circular(10.0)),                          ),                          child: Padding(                            padding: const EdgeInsets.symmetric(vertical: 17.0, horizontal: 17.0),                            child: Icon(                              Icons.person,                              color: Colors.white,                            ),                          )                      ),                      Expanded(                        child: TextField(                          onChanged: (value){                            setState(() {                              _name = value;                            });                          },                          style: TextStyle(                              fontSize: 17.0                          ),                          decoration: InputDecoration(                              filled: true,                              fillColor: kWhiteColor,                              focusedBorder: OutlineInputBorder(                                  borderSide: BorderSide.none                              ),                              enabledBorder: OutlineInputBorder(                                  borderSide: BorderSide.none                              ),                              hintText: isThereName ? "Employee Name" : "Employee Name Required*",                              hintStyle: TextStyle(                                color: isThereName ? Colors.grey[700] : Colors.red,                              )                          ),                        ),                      )                    ],                  ),                ),              ),              Padding(                padding: const EdgeInsets.symmetric(horizontal: 7.0),                child: Card(                  shape: RoundedRectangleBorder(                      borderRadius: BorderRadius.only(topLeft: Radius.circular(10.0), bottomLeft: Radius.circular(10.0))                  ),                  child: Row(                    children: <Widget>[                      Container(                          decoration: BoxDecoration(                            color: kLightBlue,                            borderRadius: BorderRadius.only(topLeft: Radius.circular(10.0), bottomLeft: Radius.circular(10.0)),                          ),                          child: Padding(                            padding: const EdgeInsets.symmetric(vertical: 17.0, horizontal: 17.0),                            child: Icon(                              Icons.attach_money,                              color: Colors.white,                            ),                          )                      ),                      Expanded(                        child: TextField(                          onChanged: (value){                            setState(() {                              _salary = value;                            });                          },                          keyboardType: TextInputType.number,                          style: TextStyle(                              fontSize: 17.0                          ),                          decoration: InputDecoration(                              filled: true,                              fillColor: kWhiteColor,                              focusedBorder: OutlineInputBorder(                                  borderSide: BorderSide.none                              ),                              enabledBorder: OutlineInputBorder(                                  borderSide: BorderSide.none                              ),                              hintText: isThereName ? "Salary/Month" : "Salary/Month Required*",                              hintStyle: TextStyle(                                color: isThereSalary ? Colors.grey[700] : Colors.red,                              )                          ),                        ),                      )                    ],                  ),                ),              ),              Padding(                padding: const EdgeInsets.symmetric(horizontal: 7.0),                child: Card(                  shape: RoundedRectangleBorder(                      borderRadius: BorderRadius.only(topLeft: Radius.circular(10.0), bottomLeft: Radius.circular(10.0))                  ),                  child: Row(                    children: <Widget>[                      Container(                          decoration: BoxDecoration(                            color: kLightBlue,                            borderRadius: BorderRadius.only(topLeft: Radius.circular(10.0), bottomLeft: Radius.circular(10.0)),                          ),                          child: Padding(                            padding: const EdgeInsets.symmetric(vertical: 17.0, horizontal: 17.0),                            child: Icon(                              Icons.calendar_today,                              color: Colors.white,                            ),                          )                      ),                      Expanded(                          flex: 5,                          child: Container(                              color: kWhiteColor,                              child: Padding(                                padding:                                const EdgeInsets.symmetric(vertical: 19.0, horizontal: 12.0),                                child: Text(                                  DateFormat("dd-MM-yyyy").format(_dateTime),                                  style: TextStyle(fontSize: 17.0),                                ),                              )                          )                      )                    ],                  ),                ),              ),              Padding(                padding: const EdgeInsets.symmetric(horizontal: 7.0),                child: Card(                  shape: RoundedRectangleBorder(                      borderRadius: BorderRadius.only(topLeft: Radius.circular(10.0), bottomLeft: Radius.circular(10.0))                  ),                  child: Row(                    children: <Widget>[                      Expanded(                        child: Container(                            decoration: BoxDecoration(                              color: kLightBlue,                              borderRadius: BorderRadius.only(topLeft: Radius.circular(10.0), bottomLeft: Radius.circular(10.0)),                            ),                            child: Padding(                              padding: const EdgeInsets.symmetric(vertical: 17.0),                              child: Icon(                                Icons.monetization_on,                                color: Colors.white,                              ),                            )                        ),                      ),                      Expanded(                        flex: 5,                        child: TextField(                          onChanged: (value){                            setState(() {                              _gst = value;                            });                          },                          keyboardType: TextInputType.number,                          style: TextStyle(                              fontSize: 17.0                          ),                          decoration: InputDecoration(                              filled: true,                              fillColor: kWhiteColor,                              focusedBorder: OutlineInputBorder(                                  borderSide: BorderSide.none                              ),                              enabledBorder: OutlineInputBorder(                                  borderSide: BorderSide.none                              ),                              hintText: isThereGST ? "GST" : "GST Required*",                              hintStyle: TextStyle(                                color:isThereGST ? Colors.grey[700] : Colors.red,                              )                          ),                        ),                      )                    ],                  ),                ),              ),              RaisedButton(                onPressed: (){                  setState(() {                    isLoading = true;                  });                  _checkFields();                },                shape: RoundedRectangleBorder(                    borderRadius: BorderRadius.circular(15.0),                    side: BorderSide(width: 1.0, color: Colors.white, style: BorderStyle.solid)                ),                color: kLightBlue,                child: Padding(                  padding: const EdgeInsets.symmetric(horizontal: 15.0),                  child: Text(                    "Generate CODE",                    style: TextStyle(                        color: Colors.white,                        fontWeight: FontWeight.bold                    ),                  ),                ),              ),            ],          ),        ),      ),    );  }}